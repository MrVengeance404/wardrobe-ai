import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User, AuthState } from '../types';
import { mockUser } from '../data/mockData';

interface AuthContextType extends AuthState {
  login: (email: string, password: string) => Promise<void>;
  register: (userData: Partial<User>, password: string) => Promise<void>;
  logout: () => void;
  updateUser: (userData: Partial<User>) => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [authState, setAuthState] = useState<AuthState>({
    isAuthenticated: false,
    user: null,
    loading: true,
    error: null,
  });

  useEffect(() => {
    // Check for stored user in localStorage in a real app
    // This is just using mock data for demo
    const checkAuth = async () => {
      try {
        // In a real app, we would validate the token with the server
        const storedAuth = localStorage.getItem('wardrobeAuth');
        
        if (storedAuth) {
          const parsedAuth = JSON.parse(storedAuth);
          setAuthState({
            isAuthenticated: true,
            user: parsedAuth.user,
            loading: false,
            error: null,
          });
        } else {
          setAuthState(prevState => ({
            ...prevState,
            loading: false,
          }));
        }
      } catch (error) {
        setAuthState({
          isAuthenticated: false,
          user: null,
          loading: false,
          error: 'Failed to authenticate',
        });
      }
    };

    checkAuth();
  }, []);

  const login = async (email: string, password: string): Promise<void> => {
    try {
      setAuthState(prevState => ({
        ...prevState,
        loading: true,
        error: null,
      }));

      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));

      // In a real app, we would call an API endpoint to validate credentials
      // For demo purposes, we're using mock data
      if (email === 'user@example.com' && password === 'password') {
        const authData = {
          isAuthenticated: true,
          user: mockUser,
          loading: false,
          error: null,
        };
        
        localStorage.setItem('wardrobeAuth', JSON.stringify({
          user: mockUser,
          token: 'mock-jwt-token',
        }));
        
        setAuthState(authData);
      } else {
        throw new Error('Invalid credentials');
      }
    } catch (error) {
      setAuthState(prevState => ({
        ...prevState,
        loading: false,
        error: error instanceof Error ? error.message : 'Login failed',
      }));
      throw error;
    }
  };

  const register = async (userData: Partial<User>, password: string): Promise<void> => {
    try {
      setAuthState(prevState => ({
        ...prevState,
        loading: true,
        error: null,
      }));

      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));

      // In a real app, we would call an API endpoint to register the user
      // For demo purposes, we're using mock data with some of the user's inputs
      const newUser: User = {
        ...mockUser,
        ...userData,
        id: '1', // In a real app, this would be generated by the server
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      const authData = {
        isAuthenticated: true,
        user: newUser,
        loading: false,
        error: null,
      };
      
      localStorage.setItem('wardrobeAuth', JSON.stringify({
        user: newUser,
        token: 'mock-jwt-token',
      }));
      
      setAuthState(authData);
    } catch (error) {
      setAuthState(prevState => ({
        ...prevState,
        loading: false,
        error: error instanceof Error ? error.message : 'Registration failed',
      }));
      throw error;
    }
  };

  const logout = (): void => {
    localStorage.removeItem('wardrobeAuth');
    setAuthState({
      isAuthenticated: false,
      user: null,
      loading: false,
      error: null,
    });
  };

  const updateUser = async (userData: Partial<User>): Promise<void> => {
    try {
      setAuthState(prevState => ({
        ...prevState,
        loading: true,
        error: null,
      }));

      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));

      // In a real app, we would call an API endpoint to update the user
      if (authState.user) {
        const updatedUser: User = {
          ...authState.user,
          ...userData,
          updatedAt: new Date(),
        };

        const updatedAuthData = {
          isAuthenticated: true,
          user: updatedUser,
          loading: false,
          error: null,
        };
        
        localStorage.setItem('wardrobeAuth', JSON.stringify({
          user: updatedUser,
          token: 'mock-jwt-token',
        }));
        
        setAuthState(updatedAuthData);
      } else {
        throw new Error('No authenticated user');
      }
    } catch (error) {
      setAuthState(prevState => ({
        ...prevState,
        loading: false,
        error: error instanceof Error ? error.message : 'Update failed',
      }));
      throw error;
    }
  };

  return (
    <AuthContext.Provider value={{ ...authState, login, register, logout, updateUser }}>
      {children}
    </AuthContext.Provider>
  );
}; 